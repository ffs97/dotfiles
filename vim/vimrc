"                     .
"         ▂▂▂▂▂▂▂▂▂ ...... ▂▂▂▂▂▂▂▂▂▂▂
"        ▞░░░░░░░░▚▚ .... ▞░░░░░░░░░░▚▚
"        ▚░░░░░░░░▞▞......▚░░░░░░░░░░▞▞
"         ▐░░░░░░░▋▏....... ▞░░░░░░░▞▞
"        .▐░░░░░░░▋▏..... ▞░░░░░░░▞▞
"     ....▐░░░░░░░▋▏... ▞░░░░░░░▞▞..███
"  .......▐░░░░░░░▋▏. ▞░░░░░░░▞▞........
"     ....▐░░░░░░░▋▏▞░░░░░░░▞▞..███.. ██████████████
"        .▐░░░░░░░░░░░░░░░▞▞..███.  ███   ███   ███
"         ▐░░░░░░░░░░░░░▞▞..███   ███   ███   ███
"         ▐░░░░░░░░░░░▞▞..███   ███   ███   ███
"          ▀▀▀▀▀▀▀▀▀▀▝...
"                    .
" ======================================================================================
"   Name:       fat.vim
"   Author:     Gurpreet Singh
"   Url:        https://github.com/ffs97/dotfiles/vim/vimrc
"   License:    The MIT License (MIT)
"
"   Configuration file for [g]vim
"
"   Dependencies:
"       - vim +python +clipboard (vim)
"       - Vundle (vim)
"       - black (python)
"       - lua-fmt (lua)
"       - luacheck (lua)
" ======================================================================================

if $THEME == ""
    let g:theme="apocalypse"
else
    let g:theme=$THEME
endif

set shell=/usr/bin/zsh
set remap

" --------------------------------------------------------------------------------------
" Loading Vundle Plugins

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'itchyny/lightline.vim'      " Nice looking statusline
Plugin 'preservim/nerdcommenter'    " Multi-language commenting functionality
Plugin 'scrooloose/nerdtree'        " File explorer not based on netrw
Plugin 'ryanoasis/vim-devicons'     " Nerd Font icons for NERD Tree
Plugin 'Chiel92/vim-autoformat'     " Wrapping for multi-language formatting
Plugin 'junegunn/goyo.vim'          " Distraction-free writing
Plugin 'neomake/neomake'            " Asynchronous syntax checking
Plugin 'ZeroKnight/vim-signjump'    " Jumping between signs
Plugin 'tpope/vim-eunuch'           " OS functionality consistent with open buffers
Plugin 'dhruvasagar/vim-table-mode' " Easy table writing (md, rest) functionality
Plugin 'SirVer/ultisnips'           " Python wrapper for dynamic snippets
Plugin 'honza/vim-snippets'         " Multi-language snippet shortcuts
Plugin 'Shougo/deoplete.nvim'       " Asynchronous autocompletion functionality
Plugin 'roxma/nvim-yarp'            " Dependency for deoplete
Plugin 'roxma/vim-hug-neovim-rpc'   " Dependency for deoplete
Plugin 'davidhalter/jedi-vim'       " Jedi autocompletion library for vim (python)
Plugin 'lervag/vimtex'              " Tex compilinging functionality
Plugin 'godlygeek/tabular'          " Tabular + vertical align functionalities
Plugin 'doums/coBra'                " Automatic bracket matching functionality

call vundle#end()

" --------------------------------------------------------------------------------------
" Configuring the User Interface

execute "colorscheme " . g:theme

set guifont=Iosevka\ Medium\ 11
set encoding=utf8
set guioptions=v
set noshowmode

set cursorline
set linespace=-1
set number numberwidth=5
set clipboard=unnamedplus

set laststatus=2 showtabline=2

set splitbelow splitright
set fillchars+=vert:●

autocmd BufEnter * silent! :lchdir %:p:h

set viminfo+=:500
set timeout ttimeoutlen=50

silent !stty -ixon
autocmd VimLeave * silent !stty ixon

set incsearch nohlsearch

set autoread
set foldmethod=marker

autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if
\     !bufexists("[Command Line]") | checktime |
\ endif

source ${HOME}/.vim/shortcuts.vim

" Prevent vim to empty the clipboard on exit
autocmd VimLeave * call system("xclip -o | xclip -selection c")

" --------------------------------------------------------------------------------------
" Configuring the Wild Menu

if has("wildmenu")
    set wildmenu

    set wildignore+=*.a,*.o
    set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
    set wildignore+=*.pdf,*.log,*.aux,*.out,*.fls,*.fdb_latexmk
    set wildignore+=*.tar.*,*.zip,*.gz
    set wildignore+=*.pyc,
    set wildignore+=.DS_Store,.git,.hg,.svn
    set wildignore+=*~,*.swp,*.tmp
endif

" --------------------------------------------------------------------------------------
" Configuring Syntax and Indentation

filetype plugin indent on
syntax on
if &diff
    syntax off
endif

autocmd FileType tex,latex,plaintex set syntax=context filetype=tex

set tabstop=4 shiftwidth=4
set autoindent expandtab

autocmd FileType markdown set conceallevel=2

" --------------------------------------------------------------------------------------
" Configuring Word Wrap

ru macros/justify.vim
vmap <c-j> _j

set textwidth=88
set nowrap formatoptions-=t
autocmd FileType markdown,text
\     setlocal wrap linebreak nolist breakindent formatoptions+=t

" --------------------------------------------------------------------------------------
" Configuring Lightline

let g:lightline = {"colorscheme": g:theme}

" --------------------------------------------------------------------------------------
" Configuring Nerd Commenter

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = "left"
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

" --------------------------------------------------------------------------------------
" Configuring Nerd Tree

let NERDTreeRespectWildIgnore=1

nmap <c-b> :NERDTreeToggleVCS<cr>

" --------------------------------------------------------------------------------------
" Configuring Autoformat

nmap <F5> :Autoformat<cr>:Neomake<cr>

" --------------------------------------------------------------------------------------
" Configuring Goyo

let g:goyo_width=88
let g:goyo_height=95
let g:goyo_linenr=0

" --------------------------------------------------------------------------------------
" Configuring Neomake

call neomake#configure#automake("w")

" --------------------------------------------------------------------------------------
" Configuring Ultisnips and YouCompleteMe

let g:UltiSnipsExpandTrigger = "<tab>"

let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" --------------------------------------------------------------------------------------
" Configuring Vimtex

let g:vimtex_quickfix_mode = 2
let g:vimtex_quickfix_autoclose_after_keystrokes = 0
let g:vimtex_view_method = "zathura"

let g:vimtex_fold_enabled = 1
let g:vimtex_fold_manual = 1

let g:vimtex_quickfix_latexlog = {
\     "default" : 0,
\     "packages" : {
\         "default" : 0,
\     },
\ }

" Note: The following makes vim with open tex files very slow
" Omnix completion for deoplete {{{
" call deoplete#custom#var("omni", "input_patterns", {
" \     "tex": g:vimtex#re#deoplete
" \ })
" }}}

" --------------------------------------------------------------------------------------
" Configuring Deoplete

" Define dictionary {{{
let g:deoplete#sources#dictionary#dictionaries = {
\     "default" : "",
\     "vimshell" : $HOME."/.vimshell_hist",
\     "scheme" : $HOME."/.gosh_completions"
\ }
" }}}

" Define keyword {{{ --deprecated
" if !exists("g:deoplete#keyword_patterns")
"     let g:deoplete#keyword_patterns = {}
" endif
" let g:deoplete#keyword_patterns["default"] = "\h\w*"
" }}}

" Completion mappings {{{
inoremap <expr><C-g> deoplete#undo_completion()
inoremap <expr><C-l> deoplete#complete_common_string()
" }}}

" Close popup and save indent on <cr> {{{
function! s:my_cr_function()
  return pumvisible() ? "\<c-y>" : "\<cr>"
endfunction

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" }}}


" Popup navigation {{{
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
" }}}

" Close popup and delete on <bs> {{{
inoremap <expr><c-h> deoplete#smart_close_popup()."\<c-h>"
inoremap <expr><bs> deoplete#smart_close_popup()."\<c-h>"
" }}}

" Define some options {{{
let g:acp_enableAtStartup = 0
let deoplete#enable_at_startup = 1
let deoplete#sources#syntax#min_keyword_length = 3
" let deoplete#camel_case = v:true --deprecated
" let deoplete#auto_complete_delay = 0 --deprecated
let deoplete#smart_case = v:true
let deoplete#min_pattern_length = 3
" }}}

" Removing matcher_length {{{
call deoplete#custom#source("ultisnips", "matchers", ["matcher_fuzzy"])
" }}}

" --------------------------------------------------------------------------------------
" Configuring Jedi

let g:jedi#use_splits_not_buffers = "right"
let g:jedi#popup_select_first = 0

let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_stubs_command = "<leader>s"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"


" --------------------------------------------------------------------------------------
" Confuguring Autoformat

let g:autoformat_autoindent = 0

let g:formatdef_my_custom_lua = '"luafmt --stdin -l 88 -i " . &shiftwidth'
let g:formatters_lua = ["my_custom_lua"]

let g:formatdef_my_custom_tex = '"latexindent -"'
let g:formatters_tex = ["my_custom_tex"]

autocmd BufWritePre *.py :Autoformat
